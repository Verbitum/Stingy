import json
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

DATA_FILE = "data.json"
FUTURE_FILE = "future.json"

# ======== –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º ========
def load_balance():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
        return data.get("balance", 0)
    except (FileNotFoundError, json.JSONDecodeError):
        return 0

def save_balance(balance):
    with open(DATA_FILE, "w") as f:
        json.dump({"balance": balance}, f)

# ======== –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ ========
def load_future_operations():
    try:
        with open(FUTURE_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_future_operations(operations):
    with open(FUTURE_FILE, "w") as f:
        json.dump(operations, f, ensure_ascii=False, indent=2)

# ======== –°–æ—Å—Ç–æ—è–Ω–∏—è ========
CHOOSING_INCOME, CHOOSING_EXPENSE = range(2)
CHOOSING_FUTURE_INCOME, CHOOSING_FUTURE_EXPENSE = range(2, 4)

# ======== –ö–æ–º–∞–Ω–¥—ã ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return

    user_name = update.effective_user.first_name
    keyboard = [
        ["üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"],
        ["üìä –ë–∞–ª–∞–Ω—Å", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"],
        ["üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π", "üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–°–º–æ—Ç—Ä–∏, —á—Ç–æ —è —É–º–µ—é:\n"
        "üí∏ ‚Äî –î–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã\n"
        "üí∞ ‚Äî –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã\n"
        "üìä ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "‚ûï ‚Äî –î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "üìã ‚Äî –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π\n"
        "üìÖ ‚Äî –î–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞",
        reply_markup=reply_markup
    )

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balance = load_balance()
    await update.message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ")

# ======== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ ========
async def add_income_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    return CHOOSING_INCOME

async def add_expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return CHOOSING_EXPENSE

async def add_income_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        balance = load_balance()
        balance += amount
        save_balance(balance)
        await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return CHOOSING_INCOME
    return ConversationHandler.END

async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        balance = load_balance()
        balance -= amount
        save_balance(balance)
        await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return CHOOSING_EXPENSE
    return ConversationHandler.END

# ======== –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ========
async def future_operation_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥", "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥"], ["–û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–£–ú–ú–ê;–ù–ê–ó–í–ê–ù–ò–ï;–ì–ì–ì–ì-–ú–ú-–î–î",
        reply_markup=reply_markup
    )

async def add_future_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–£–ú–ú–ê;–ù–ê–ó–í–ê–ù–ò–ï;–ì–ì–ì–ì-–ú–ú-–î–î")
    return CHOOSING_FUTURE_INCOME

async def add_future_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–£–ú–ú–ê;–ù–ê–ó–í–ê–ù–ò–ï;–ì–ì–ì–ì-–ú–ú-–î–î")
    return CHOOSING_FUTURE_EXPENSE

async def save_future_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount, name, date_str = update.message.text.split(";")
        amount = float(amount)
        date = datetime.strptime(date_str.strip(), "%Y-%m-%d").date()
        operations = load_future_operations()
        operations.append({"type": "income", "amount": amount, "name": name.strip(), "date": str(date)})
        save_future_operations(operations)
        await update.message.reply_text("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–£–ú–ú–ê;–ù–ê–ó–í–ê–ù–ò–ï;–ì–ì–ì–ì-–ú–ú-–î–î")
        return CHOOSING_FUTURE_INCOME
    return ConversationHandler.END

async def save_future_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount, name, date_str = update.message.text.split(";")
        amount = float(amount)
        date = datetime.strptime(date_str.strip(), "%Y-%m-%d").date()
        operations = load_future_operations()
        operations.append({"type": "expense", "amount": amount, "name": name.strip(), "date": str(date)})
        save_future_operations(operations)
        await update.message.reply_text("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ")
    except Exception:
        await update.message.reply_text("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–£–ú–ú–ê;–ù–ê–ó–í–ê–ù–ò–ï;–ì–ì–ì–ì-–ú–ú-–î–î")
        return CHOOSING_FUTURE_EXPENSE
    return ConversationHandler.END

# ======== –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ========
async def list_operations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    operations = load_future_operations()
    if not operations:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç.")
        return

    msg = "üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
    for op in operations:
        emoji = "üí∞" if op["type"] == "income" else "üí∏"
        msg += f"{emoji} {op['name']} ‚Äî {op['amount']} ‚ÇΩ (–¥–∞—Ç–∞: {op['date']})\n"
    await update.message.reply_text(msg)

# ======== –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞ ========
async def forecast_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balance = load_balance()
    operations = load_future_operations()
    if not operations:
        await update.message.reply_text(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ (–æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç)")
        return

    forecast = balance
    for op in operations:
        if op["type"] == "income":
            forecast += op["amount"]
        else:
            forecast -= op["amount"]

    await update.message.reply_text(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å: {forecast} ‚ÇΩ")

# ======== –û—Ç–º–µ–Ω–∞ ========
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ======== –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ========
app = ApplicationBuilder().token("8390399537:AAH3JU0sd35q-JmPn7pHTg1Z1vCTq6kdW4Y").build()

# –ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Regex("üìä –ë–∞–ª–∞–Ω—Å"), show_balance))
app.add_handler(MessageHandler(filters.Regex("üìã –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π"), list_operations))
app.add_handler(MessageHandler(filters.Regex("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞"), forecast_balance))
app.add_handler(MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"), future_operation_start))

# ConversationHandler –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤
income_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("üí∞ –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), add_income_start)],
    states={CHOOSING_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_income_amount)]},
    fallbacks=[CommandHandler("cancel", cancel)]
)

expense_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), add_expense_start)],
    states={CHOOSING_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_amount)]},
    fallbacks=[CommandHandler("cancel", cancel)]
)

future_income_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥"), add_future_income)],
    states={CHOOSING_FUTURE_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_future_income)]},
    fallbacks=[CommandHandler("cancel", cancel)]
)

future_expense_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥"), add_future_expense)],
    states={CHOOSING_FUTURE_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_future_expense)]},
    fallbacks=[CommandHandler("cancel", cancel)]
)

app.add_handler(income_handler)
app.add_handler(expense_handler)
app.add_handler(future_income_handler)
app.add_handler(future_expense_handler)

app.run_polling()
