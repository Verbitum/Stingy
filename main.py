import json
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from telegram.constants import ParseMode
from config import API_TOKEN

USERS_FILE = "users.json"

# ======== –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ========
def load_user_data(user_id):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get(str(user_id), {"balance": 0, "history": [], "future": []})
    except FileNotFoundError:
        return {"balance": 0, "history": [], "future": []}
    except json.JSONDecodeError:
        return {"balance": 0, "history": [], "future": []}

def save_user_data(user_id, user_data):
    try:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = {}
    data[str(user_id)] = user_data
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# ======== –ú–µ–Ω—é ========
def main_menu():
    keyboard = [
        ["üìä –ë–∞–ª–∞–Ω—Å", "üóì –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", "üìã –ò—Å—Ç–æ—Ä–∏—è"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

def add_operation_menu():
    keyboard = [
        ["‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"],
        ["‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", "üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

def future_menu():
    keyboard = [
        ["‚ûï –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥", "‚ûñ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥"],
        ["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö", "üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

def forecast_menu():
    keyboard = [
        ["üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", "üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü"],
        ["üìÖ –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞", "üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

# ======== –°–æ—Å—Ç–æ—è–Ω–∏—è ========
CHOOSING_INCOME, CHOOSING_EXPENSE, FUTURE_AMOUNT_DATE = range(3)

# ======== –•—ç–Ω–¥–ª–µ—Ä—ã ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_first_name = (update.effective_user.first_name or "").strip()
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, *{user_first_name}*! üëã\n\n"
        "–°–º–æ—Ç—Ä–∏, —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "üóì –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –±—É–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã / –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "üìã –°–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
        "*–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!*"
    )
    await update.message.reply_text(welcome_text, reply_markup=main_menu(), parse_mode=ParseMode.MARKDOWN)

# –ë–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = load_user_data(user_id)
    await update.message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = load_user_data(user_id)
    history = user.get("history", [])
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
        return
    text = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
    for op in history:
        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        text += f"{op['type']}: {op['amount']} ‚ÇΩ\n"
    await update.message.reply_text(text)

# –ü—Ä–æ–≥–Ω–æ–∑
async def forecast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=forecast_menu())

async def handle_forecast_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    now = datetime.now()
    user_id = update.effective_user.id
    user = load_user_data(user_id)

    if text == "üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é":
        target_date = now + timedelta(weeks=1)
    elif text == "üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü":
        target_date = now + timedelta(days=30)
    elif text == "üìÖ –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞":
        # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–æ—á–Ω–æ–µ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ 3 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ —á–µ—Ä–µ–∑ dateutil.relativedelta
        target_date = now + timedelta(days=90)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return
    else:
        return  # –Ω–µ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    balance = user.get("balance", 0)
    future_ops = user.get("future", [])

    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –±—É–¥—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    for op in future_ops:
        try:
            op_date = datetime.strptime(op["date"], "%Y-%m-%d")
        except Exception:
            # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É
            continue
        if op_date <= target_date:
            if op["type"] == "–¥–æ—Ö–æ–¥":
                balance += op["amount"]
            else:
                balance -= op["amount"]

    await update.message.reply_text(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ {target_date.strftime('%d.%m.%Y')}: {balance} ‚ÇΩ")

# –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É
async def instant_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=add_operation_menu())
        return ConversationHandler.END

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
        return CHOOSING_INCOME

    if text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        return CHOOSING_EXPENSE

    if text == "‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é":
        await update.message.reply_text("–ú–µ–Ω—é –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=future_menu())
        return ConversationHandler.END

    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return ConversationHandler.END

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞
async def add_income_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = load_user_data(user_id)
    text = update.message.text
    try:
        amount = float(text)
    except Exception:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return CHOOSING_INCOME

    user["balance"] += amount
    user.setdefault("history", []).append({"type": "–¥–æ—Ö–æ–¥", "amount": amount, "ts": datetime.now().isoformat()})
    save_user_data(user_id, user)

    await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ", reply_markup=add_operation_menu())
    return ConversationHandler.END

async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = load_user_data(user_id)
    text = update.message.text
    try:
        amount = float(text)
    except Exception:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return CHOOSING_EXPENSE

    user["balance"] -= amount
    user.setdefault("history", []).append({"type": "—Ä–∞—Å—Ö–æ–¥", "amount": amount, "ts": datetime.now().isoformat()})
    save_user_data(user_id, user)

    await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['balance']} ‚ÇΩ", reply_markup=add_operation_menu())
    return ConversationHandler.END

# –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
async def handle_future_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    user = load_user_data(user_id)

    if text in ["‚ûï –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥", "‚ûñ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥"]:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤ session –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–≤–æ–¥–∞ "—Å—É–º–º–∞ –Ω–∞ –¥–∞—Ç–∞"
        context.user_data["future_last_command"] = "–¥–æ—Ö–æ–¥" if "–¥–æ—Ö–æ–¥" in text else "—Ä–∞—Å—Ö–æ–¥"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞ –Ω–∞ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –Ω–∞ 2025-10-01)")
        return FUTURE_AMOUNT_DATE

    if text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö":
        future = user.get("future", [])
        if not future:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç.")
            return
        text_list = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
        for op in future:
            text_list += f"{op['type']}: {op['amount']} ‚ÇΩ –Ω–∞ {op['date']}\n"
        await update.message.reply_text(text_list)
        return

    if text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'", reply_markup=add_operation_menu())
        return

    # –ï—Å–ª–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª —Å—Ç—Ä–æ–∫—É "—Å—É–º–º–∞ –Ω–∞ YYYY-MM-DD"
    if "–Ω–∞" in text:
        try:
            amount_str, date_str = text.split("–Ω–∞", 1)
            amount = float(amount_str.strip())
            date = date_str.strip()
            # –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date, "%Y-%m-%d")
        except Exception:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—É–º–º–∞ –Ω–∞ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –Ω–∞ 2025-10-01)")
            return

        op_type = context.user_data.get("future_last_command")
        if op_type is None:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥).")
            return

        user.setdefault("future", []).append({"type": op_type, "amount": amount, "date": date})
        save_user_data(user_id, user)
        await update.message.reply_text(f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {op_type} {amount} ‚ÇΩ –Ω–∞ {date}", reply_markup=future_menu())
        return

    # –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    return

# ======== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∏ –∑–∞–ø—É—Å–∫ ========
app = ApplicationBuilder().token(API_TOKEN).build()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))

# –í–ê–ñ–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ä–∞–Ω—å—à–µ —Ö—ç–Ω–¥–ª–µ—Ä–∞ –±—É–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π,
# —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ "üìÖ ..." –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–ª–∏—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –±—É–¥—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
app.add_handler(MessageHandler(filters.Regex(r"^üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é$|^üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü$|^üìÖ –ß–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞$|^üîô –ù–∞–∑–∞–¥$"), handle_forecast_buttons))
app.add_handler(MessageHandler(filters.Regex("^üóì –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞$"), forecast_start))

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ / –º–µ–Ω—é
app.add_handler(MessageHandler(filters.Regex("^üìä –ë–∞–ª–∞–Ω—Å$"), show_balance))
app.add_handler(MessageHandler(filters.Regex("^üìã –ò—Å—Ç–æ—Ä–∏—è$"), show_history))
app.add_handler(MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é$"), instant_operation))
app.add_handler(MessageHandler(filters.Regex("^‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é$|^üîô –ù–∞–∑–∞–¥$"), instant_operation))

# ConversationHandlers –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (–≤—Ö–æ–¥ ‚Äî –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º –≤–≤–æ–¥ —Å—É–º–º—ã)
app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥$"), instant_operation)],
    states={CHOOSING_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_income_amount)]},
    fallbacks=[]
))
app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$"), instant_operation)],
    states={CHOOSING_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_amount)]},
    fallbacks=[]
))

# –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: –ª–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "—Å—É–º–º–∞ –Ω–∞ –¥–∞—Ç–∞"
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –Ω–∞—á–∞–ª–æ —Å "üìÖ", –Ω–æ –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–Ω—å—à–µ ‚Äî —ç—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞.
future_pattern = r"^(‚ûï –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥|‚ûñ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥|üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö|üîô –ù–∞–∑–∞–¥|.*\b–Ω–∞\b.*)$"
app.add_handler(MessageHandler(filters.Regex(future_pattern), handle_future_buttons))

# –ó–∞–ø—É—Å–∫
app.run_polling()
