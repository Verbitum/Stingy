import json
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)
from telegram.constants import ParseMode
from config import API_TOKEN

DATA_FILE = "data.json"
FUTURE_FILE = "future.json"
HISTORY_FILE = "history.json"

# ======== –†–∞–±–æ—Ç–∞ —Å –±–∞–ª–∞–Ω—Å–æ–º ========
def load_balance():
    try:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
        return data.get("balance", 0)
    except:
        return 0

def save_balance(balance):
    with open(DATA_FILE, "w") as f:
        json.dump({"balance": balance}, f)

# ======== –†–∞–±–æ—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π ========
def load_history():
    try:
        with open(HISTORY_FILE, "r") as f:
            data = json.load(f)
        return data.get("history", [])
    except:
        return []

def save_history(history):
    with open(HISTORY_FILE, "w") as f:
        json.dump({"history": history}, f)

# ======== –†–∞–±–æ—Ç–∞ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ ========
def load_future():
    try:
        with open(FUTURE_FILE, "r") as f:
            data = json.load(f)
        return data.get("future", [])
    except:
        return []

def save_future(future):
    with open(FUTURE_FILE, "w") as f:
        json.dump({"future": future}, f)

# ======== –ú–µ–Ω—é ========
def main_menu():
    keyboard = [
        ["üìä –ë–∞–ª–∞–Ω—Å", "üóì –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é", "üìã –ò—Å—Ç–æ—Ä–∏—è"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

def add_operation_menu():
    keyboard = [
        ["‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"],
        ["‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", "üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

def future_menu():
    keyboard = [
        ["‚ûï –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥", "‚ûñ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥"],
        ["üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö", "üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

def forecast_menu():
    keyboard = [
        ["üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", "üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü"],
        ["üìÖ –ß–µ—Ä–µ–∑ 4 –º–µ—Å—è—Ü–∞", "üîô –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

# ======== –°–æ—Å—Ç–æ—è–Ω–∏—è ========
CHOOSING_INCOME, CHOOSING_EXPENSE, FUTURE_AMOUNT_DATE = range(3)

# ======== –ö–æ–º–∞–Ω–¥—ã ========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return
    user_first_name = update.message.from_user.first_name or ""
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, *{user_first_name}*! üëã\n\n"
        "–°–º–æ—Ç—Ä–∏, —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "üóì –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –±—É–¥—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "‚ûï –î–æ–±–∞–≤–ª—è—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã / –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
        "üìã –°–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
        "*–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!*"
    )
    await update.message.reply_text(
        welcome_text,
        reply_markup=main_menu(),
        parse_mode=ParseMode.MARKDOWN
    )

# ======== –ë–∞–ª–∞–Ω—Å –∏ –∏—Å—Ç–æ—Ä–∏—è ========
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    balance = load_balance()
    await update.message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ")

async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    history = load_history()
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç–∞.")
    else:
        text = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
        for op in history:
            text += f"{op['type']}: {op['amount']} ‚ÇΩ\n"
        await update.message.reply_text(text)

# ======== –ü—Ä–æ–≥–Ω–æ–∑ ========
async def forecast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=forecast_menu())

async def handle_forecast_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    now = datetime.now()

    if text == "üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é":
        target_date = now + timedelta(weeks=1)
    elif text == "üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü":
        target_date = now + timedelta(days=30)
    elif text == "üìÖ –ß–µ—Ä–µ–∑ 4 –º–µ—Å—è—Ü–∞":
        target_date = now + timedelta(days=120)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return

    balance = load_balance()
    future = load_future()
    for op in future:
        try:
            op_date = datetime.strptime(op["date"], "%Y-%m-%d")
            if op_date <= target_date:
                balance += op["amount"] if op["type"] == "–¥–æ—Ö–æ–¥" else -op["amount"]
        except:
            continue

    await update.message.reply_text(f"–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ {target_date.strftime('%d.%m.%Y')}: {balance} ‚ÇΩ")

# ======== –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ========
async def instant_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=add_operation_menu())
        return ConversationHandler.END

    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
        return CHOOSING_INCOME

    elif text == "‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
        return CHOOSING_EXPENSE

    elif text == "‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é":
        await update.message.reply_text("–ú–µ–Ω—é –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=future_menu())
        return ConversationHandler.END

    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return ConversationHandler.END

# ======== –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞ ========
async def add_income_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        balance = load_balance()
        balance += amount
        save_balance(balance)
        history = load_history()
        history.append({"type": "–¥–æ—Ö–æ–¥", "amount": amount})
        save_history(history)
        await update.message.reply_text(f"–î–æ—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=add_operation_menu())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return CHOOSING_INCOME
    return ConversationHandler.END

async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
        balance = load_balance()
        balance -= amount
        save_balance(balance)
        history = load_history()
        history.append({"type": "—Ä–∞—Å—Ö–æ–¥", "amount": amount})
        save_history(history)
        await update.message.reply_text(f"–†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ", reply_markup=add_operation_menu())
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return CHOOSING_EXPENSE
    return ConversationHandler.END

# ======== –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ========
async def handle_future_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text in ["‚ûï –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥", "‚ûñ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥"]:
        context.user_data["future_last_command"] = "–¥–æ—Ö–æ–¥" if "–¥–æ—Ö–æ–¥" in text else "—Ä–∞—Å—Ö–æ–¥"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞ –Ω–∞ YYYY-MM-DD")
        return FUTURE_AMOUNT_DATE
    elif text == "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö":
        future = load_future()
        if not future:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—É—Å—Ç.")
        else:
            text_list = "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
            for op in future:
                text_list += f"{op['type']}: {op['amount']} ‚ÇΩ –Ω–∞ {op['date']}\n"
            await update.message.reply_text(text_list)
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'", reply_markup=add_operation_menu())
    else:
        try:
            amount_str, date_str = text.split("–Ω–∞")
            amount = float(amount_str.strip())
            date = date_str.strip()
            op_type = context.user_data.get("future_last_command")
            future = load_future()
            future.append({"type": op_type, "amount": amount, "date": date})
            save_future(future)
            await update.message.reply_text(f"–ü—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {op_type} {amount} ‚ÇΩ –Ω–∞ {date}")
        except Exception:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å—É–º–º–∞ –Ω–∞ YYYY-MM-DD")

# ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ========
app = ApplicationBuilder().token(API_TOKEN).build()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Regex("üìä –ë–∞–ª–∞–Ω—Å"), show_balance))
app.add_handler(MessageHandler(filters.Regex("üìã –ò—Å—Ç–æ—Ä–∏—è"), show_history))
app.add_handler(MessageHandler(filters.Regex("üóì –ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞"), forecast_start))

# –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –º–µ–Ω—é)
app.add_handler(MessageHandler(filters.Regex(
    "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é|‚è≥ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é|üîô –ù–∞–∑–∞–¥"
), instant_operation))

# ConversationHandlers –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞
app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), instant_operation)],
    states={CHOOSING_INCOME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_income_amount)]},
    fallbacks=[]
))
app.add_handler(ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("‚ûñ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), instant_operation)],
    states={CHOOSING_EXPENSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_amount)]},
    fallbacks=[]
))

# –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
app.add_handler(MessageHandler(filters.Regex(
    "‚ûï –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –¥–æ—Ö–æ–¥|‚ûñ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π —Ä–∞—Å—Ö–æ–¥|üìã –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö|\\d+.*|üîô –ù–∞–∑–∞–¥"
), handle_future_buttons))

# –ü—Ä–æ–≥–Ω–æ–∑
app.add_handler(MessageHandler(filters.Regex(
    "üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é|üìÖ –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü|üìÖ –ß–µ—Ä–µ–∑ 4 –º–µ—Å—è—Ü–∞|üîô –ù–∞–∑–∞–¥"
), handle_forecast_buttons))

# ======== –ó–∞–ø—É—Å–∫ ========
app.run_polling()
